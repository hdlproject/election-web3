// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Registered extends ethereum.Event {
  get params(): Registered__Params {
    return new Registered__Params(this);
  }
}

export class Registered__Params {
  _event: Registered;

  constructor(event: Registered) {
    this._event = event;
  }

  get citizenAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get citizenId(): string {
    return this._event.parameters[1].value.toString();
  }

  get citizenAge(): i32 {
    return this._event.parameters[2].value.toI32();
  }
}

export class Citizenship__getCitizenResult {
  value0: string;
  value1: i32;

  constructor(value0: string, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getId(): string {
    return this.value0;
  }

  getAge(): i32 {
    return this.value1;
  }
}

export class Citizenship extends ethereum.SmartContract {
  static bind(address: Address): Citizenship {
    return new Citizenship("Citizenship", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCitizen(_address: Address): Citizenship__getCitizenResult {
    let result = super.call(
      "getCitizen",
      "getCitizen(address):(string,uint8)",
      [ethereum.Value.fromAddress(_address)]
    );

    return new Citizenship__getCitizenResult(
      result[0].toString(),
      result[1].toI32()
    );
  }

  try_getCitizen(
    _address: Address
  ): ethereum.CallResult<Citizenship__getCitizenResult> {
    let result = super.tryCall(
      "getCitizen",
      "getCitizen(address):(string,uint8)",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Citizenship__getCitizenResult(value[0].toString(), value[1].toI32())
    );
  }

  getCitizens(): Array<Address> {
    let result = super.call("getCitizens", "getCitizens():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getCitizens(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall("getCitizens", "getCitizens():(address[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RegisterCitizenCall extends ethereum.Call {
  get inputs(): RegisterCitizenCall__Inputs {
    return new RegisterCitizenCall__Inputs(this);
  }

  get outputs(): RegisterCitizenCall__Outputs {
    return new RegisterCitizenCall__Outputs(this);
  }
}

export class RegisterCitizenCall__Inputs {
  _call: RegisterCitizenCall;

  constructor(call: RegisterCitizenCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _id(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _age(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class RegisterCitizenCall__Outputs {
  _call: RegisterCitizenCall;

  constructor(call: RegisterCitizenCall) {
    this._call = call;
  }
}
